<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>List of posts on Phoenix by Example</title>
    <link>https://phoenixbyexample.com/posts/</link>
    <description>Recent content in List of posts on Phoenix by Example</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Mar 2021 16:55:21 -0400</lastBuildDate>
    
      <atom:link href="https://phoenixbyexample.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>RetroTaxi Project Kickoff</title>
        <link>https://phoenixbyexample.com/posts/retro-taxi-project-kickoff/</link>
        <pubDate>Sun, 14 Mar 2021 16:55:21 -0400</pubDate>
        <guid>https://phoenixbyexample.com/posts/retro-taxi-project-kickoff/</guid>
        <description></description>
      </item>
    
      <item>
        <title>Securing Webhook Payload Delivery in Phoenix</title>
        <link>https://phoenixbyexample.com/posts/securing-webhook-payload-delivery-in-phoenix/</link>
        <pubDate>Mon, 22 Feb 2021 14:00:00 -0500</pubDate>
        <guid>https://phoenixbyexample.com/posts/securing-webhook-payload-delivery-in-phoenix/</guid>
        <description>Some of the most interesting and valuable behaviors we can build as web developers are through connecting different web applications together. Often times this comes in the form of webhooks, where one web app will POST events to your own web app. Keeping that communication secure is important and today we will take a peak into how you can secure webhook payloads in a Phoenix application.
Webhook Security 101 Webhook might sound like some scary, exotic term but at the end of the day webhooks are nothing more that a web server endpoint configured to receive HTTP POST requests in some agreed upon format.</description>
      </item>
    
      <item>
        <title>Understanding the Tradeoffs with Elixir Typespecs and Dialyzer</title>
        <link>https://phoenixbyexample.com/posts/typespecs-and-dialyzer-tradeoffs/</link>
        <pubDate>Wed, 20 Jan 2021 08:51:42 -0500</pubDate>
        <guid>https://phoenixbyexample.com/posts/typespecs-and-dialyzer-tradeoffs/</guid>
        <description>In today&amp;rsquo;s post I want to start a conversation around the tradeoffs of using Typespecs and Dialyzer use in your Elixir code.
Elixir is a dynamic, not a statically-typed language &amp;ndash; and just to preemptively avoid the programming wars that might ensue, the given type system of a language is not a &amp;ldquo;good&amp;rdquo; or &amp;ldquo;bad&amp;rdquo; attribute by itself, but it will none-the-less influences the code we write.
For those who prefer or come to Elixir from a statically-typed language background you may be interested in learning more about Elixir Typespecs, described in the documentation as follows:</description>
      </item>
    
  </channel>
</rss>
